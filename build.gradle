import net.ltgt.gradle.errorprone.CheckSeverity

apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply plugin: 'org.kordamp.gradle.source-stats'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

buildscript {
  apply from: "${rootDir}/gradle/dependencies.gradle"

  repositories {
    gradlePluginPortal()
    mavenCentral()
  }

  dependencies {
    classpath gradlePlugins.values()
  }
}

buildScan {
  termsOfServiceAgree = 'yes'
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
}

tasks.register('testReport', TestReport) {
  group = 'Build'
  description = 'Generates an aggregate test report'
  destinationDir = file("${buildDir}/reports/allTests")
}

allprojects {
  apply plugin: 'com.github.ethankhall.semantic-versioning'
  apply from: "${rootDir}/gradle/eclipse.gradle"

  repositories {
    mavenCentral()
  }

  group = 'com.github.ben-manes.caffeine'
  version.with {
    major = 3 // incompatible API changes
    minor = 0 // backwards-compatible additions
    patch = 5 // backwards-compatible bug fixes
    releaseBuild = rootProject.hasProperty('release')
  }
}

subprojects {
  apply plugin: 'biz.aQute.bnd.builder'
  apply plugin: 'java-library'
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  apply from: "${rootDir}/gradle/publish.gradle"
  apply from: "${rootDir}/gradle/codeQuality.gradle"
  apply from: "${rootDir}/gradle/dependencies.gradle"
  apply from: "${rootDir}/gradle/objectLayout.gradle"

  java.toolchain.languageVersion = JavaLanguageVersion.of(System.env.'JAVA_VERSION' ?: 11)

  configurations {
    all {
      exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
  }

  dependencies {
    testImplementation libraries.guava
    testImplementation testLibraries.truth
    testImplementation testLibraries.mockito
    testImplementation testLibraries.hamcrest
    testImplementation testLibraries.awaitility
    testImplementation testLibraries.osgiCompile

    testRuntimeOnly testLibraries.osgiRuntime
  }

  tasks.register('bundle', aQute.bnd.gradle.Bundle) {
    from sourceSets.main.output
    sourceSet = sourceSets.main
  }

  tasks.withType(JavaCompile).configureEach {
    if (name.contains('Test') || name.contains('Jmh')) {
      options.errorprone.nullaway {
        severity = CheckSeverity.OFF
      }
    }
  }

  tasks.withType(Test).configureEach {
    rootProject.testReport.reportOn it
    it.dependsOn(jar)

    // ensure tasks don't overwrite the default report directories used by the 'test' task
    reports.html.destination = file("${buildDir}/reports/${name}")
    reports.junitXml.destination = file("${buildDir}/reports/${name}/results")
    binaryResultsDirectory = file("${buildDir}/reports/${name}/results/binary/${name}")
  }

  if (project != project(':caffeine')) {
    javadoc.options.linksOffline(
      "https://static.javadoc.io/${group}/caffeine/${version}/",
      "${project(':caffeine').buildDir}/docs/javadoc/",
    )
    javadoc.dependsOn(project(':caffeine').javadoc)
  }
}

nexusPublishing {
  repositories {
    sonatype {
      username = project.properties['nexusUsername'] ?: System.env.'NEXUS_USERNAME'
      password = project.properties['nexusPassword'] ?: System.env.'NEXUS_PASSWORD'
    }
  }
}

// Only report code coverage for projects that are distributed
def coveredProjects = [ 'caffeine', 'guava', 'jcache' ].collect { project(it) }

tasks.register('jacocoFullReport', JacocoReport) {
  group = 'Coverage reports'
  description = 'Generates an aggregate report from all subprojects'

  coveredProjects.each {
    sourceSets it.sourceSets.main
    mustRunAfter it.tasks.withType(Test)
    executionData fileTree(it.buildDir.absolutePath).include('jacoco/*.exec')
  }

  reports {
    html.required = true // human readable
    xml.required = true  // required by coveralls
  }
}

coveralls {
  sourceDirs = coveredProjects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoFullReport/jacocoFullReport.xml"
}

tasks.named('coveralls').configure {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoFullReport
  onlyIf { System.env.'CI' }
}
