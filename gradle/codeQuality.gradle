/**
 * Configurations for code quality analysis
 */
import static org.gradle.util.GradleVersion.version

apply plugin: 'com.github.spotbugs'
apply plugin: 'net.ltgt.errorprone'
apply plugin: 'net.ltgt.nullaway'
apply plugin: 'org.sonarqube'
apply plugin: 'java-library'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'

configurations {
  checkstyleConfig
}

dependencies {
  checkstyleConfig gradlePlugins.checkstyle
  spotbugsPlugins gradlePlugins.findsecbugs
  errorproneJavac libraries.errorproneJavac
  errorprone libraries.errorproneCore
  errorprone libraries.nullaway
  errorprone files("${buildDir}/libs/caffeine_local.jar")
}

// Gradle rewrites the compiler's dependency on Caffeine to a project dependency, which fails
// Instead we have to download and trick the build to put the jar on the compiler's classpath
// See the downloadCaffeineLocal() task and https://github.com/gradle/gradle/issues/11625
task downloadCaffeineLocal() {
  doFirst {
    def version = '3.0.3'
    def url = 'https://repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/' +
      "${version}/caffeine-${version}.jar"
    def local = file("${buildDir}/libs/caffeine_local.jar")
    if (!local.exists()) {
      local.parentFile.mkdirs()
      new URL(url).withInputStream{ input -> local.withOutputStream{ it << input }}
    }
  }
}

javadoc.options.links(
  'https://checkerframework.org/api/',
  'https://lightbend.github.io/config/latest/api/',
  "https://guava.dev/releases/${versions.guava}/api/docs/",
  "https://docs.oracle.com/en/java/javase/${JavaVersion.current().majorVersion}/docs/api/")

jar {
  manifest.attributes 'Bundle-License': 'https://www.apache.org/licenses/LICENSE-2.0'
  metaInf {
    from "${rootDir}/LICENSE"
  }
}

checkstyle {
  showViolations = true
  toolVersion = pluginVersions.checkstyle
  config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
}

spotbugs {
  effort = 'max'
  toolVersion = pluginVersions.spotbugs
  excludeFilter = file("${rootDir}/config/spotbugs/exclude.xml")
}

pmd {
  ruleSets = []
  toolVersion = pluginVersions.pmd
  ruleSetConfig = resources.text.fromFile(file("${rootDir}/config/pmd/rulesSets.xml"))
}

jacoco {
  toolVersion = [version(pluginVersions.jacoco), version(toolVersion)].max().version
}

jacocoTestReport {
  group = 'Coverage reports'
  description = 'Generates a test coverage report for a project'

  reports {
    xml.required = true
    html.required = true
  }
}

sonarqube {
  properties {
    property 'sonar.organization', 'caffeine'
    property 'sonar.projectKey', 'caffeine:caffeine'
    property 'sonar.login', System.env.'SONAR_TOKEN'
    property 'sonar.host.url', 'https://sonarcloud.io'
  }
}

def JVM_ARGS_STRONG_ENCAPSULATION = [
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
  '--add-opens',   'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
  '--add-opens',   'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
  '--add-opens',   'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
]

tasks.withType(JavaExec) {
  jvmArgs += JVM_ARGS_STRONG_ENCAPSULATION
}

tasks.withType(JavaCompile).configureEach {
  dependsOn downloadCaffeineLocal

  options.forkOptions.jvmArgs += JVM_ARGS_STRONG_ENCAPSULATION
  options.compilerArgs << [
    '-Xlint:all,-processing,-exports', '-auxiliaryclass',
    '-requires-automatic', '-requires-transitive-automatic',
  ].join(',')
  options.encoding = 'UTF-8'
  options.errorprone {
    def enabledChecks = [
      'AssertFalse', 'CatchingUnchecked', 'CheckedExceptionNotThrown', 'ClassName',
      'ComparisonContractViolated', 'DepAnn', 'DivZero', 'EmptyIf', 'EqualsBrokenForNull',
      'FieldCanBeFinal', 'FieldCanBeLocal', 'FieldCanBeStatic', 'ForEachIterable',
      'FuzzyEqualsShouldNotBeUsedInEqualsMethod', 'FunctionalInterfaceClash', 'HashCodeToString',
      'IterablePathParameter', 'LockMethodChecker', 'LongLiteralLowerCaseSuffix', 'MissingBraces',
      'MissingDefault', 'MixedArrayDimensions', 'MissingDefault', 'NoAllocation', 'NumericEquality',
      'PackageLocation', 'RedundantThrows', 'RemoveUnusedImports', 'ReturnsNullCollection',
      'StringEquality', 'StronglyTypeTime', 'SwitchDefault', 'TimeUnitMismatch', 'TransientMisuse',
      'UnlockMethod', 'UnnecessarilyVisible', 'UnnecessaryAnonymousClass', 'UnnecessaryOptionalGet',
      'UnsafeLocaleUsage', ]
    enabledChecks.each { enable(it) }

    def disabledChecks = [ 'AutoValueSubclassLeaked', 'EmptyCatch', 'MissingSummary' ]
    disabledChecks.each { disable(it) }

    def errorChecks = [ 'NullAway' ]
    errorChecks.each { error(it) }

    nullaway {
      annotatedPackages.add('com.github.benmanes.caffeine')
    }
  }
}

tasks.named('compileTestJava').configure {
  options.errorprone.disable('NullAway')
}

tasks.withType(Test) {
  if (System.properties.containsKey('debug')) {
    jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
  }
  options {
    jvmArgs '-XX:SoftRefLRUPolicyMSPerMB=0'
  }
  if (System.env.'CI') {
    reports.html.required = false
  }
  testLogging {
    events 'skipped', 'failed'
    exceptionFormat 'full'
    showCauses = true
    showExceptions = true
    showStackTraces = true
  }
}

tasks.withType(Checkstyle) {
  enabled = System.properties.containsKey('checkstyle')
  group = 'Checkstyle'
  reports {
    xml.required = false
    html.required = true
  }
}

afterEvaluate {
  tasks.findAll { it.name.startsWith('spotbugs') }.each {
    it.enabled = System.properties.containsKey('spotbugs')
    it.group = 'SpotBugs'
    it.reports {
      html.required = true
    }
  }
}

tasks.withType(Pmd) {
  enabled = System.properties.containsKey('pmd')
  group = 'PMD'
  reports {
    xml.required = false
    html.required = true
  }
}
